{
"version":"2.0",
"description":"Process DNA (or RNA) seq data in BAM files within second stage of NPG Pipeline producing WTSI DNAP Sequencing Informatics output",
"subst_params":[
	{
		"id":"basic_pipeline_params_file",
		"required":"yes",
		"subst_constructor":{
			"vals":[ {"subst":"cfgdatadir"}, "/", "alignment_common.json" ],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{
		"id": "basic_pipeline_params",
		"type":"SPFILE",
		"name":{"subst":"basic_pipeline_params_file"},
		"required": "no",
		"comment":"this will expand to a set of subst_param elements"
	},

	{
		"id":"spatial_filter_rg_flag",
		"required":"no",
		"comment":"flag will disappear unless RG values are given (for multiple filter file application)",
		"subst_constructor":{ "vals":[ "--rg", {"subst":"spatial_filter_rg_value"} ] }
	},

	{"id":"af_metrics_name","required":"no","default":"alignment_filter_metrics.json"},
	{
		"id":"af_metrics",
		"required":"yes",
		"subst_constructor":{
			"vals":[ {"subst":"logdir"}, "/", {"subst":"rpt"}, ".", {"subst":"af_metrics_name"} ],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{"id":"target_indicator","default":""},
	{"id":"phix_indicator","default":"_phix"},
	{
		"id":"fopid_tgt",
		"comment":"id passed to the final_output_prep template; used there to construct unique file names",
		"subst_constructor":{
			"vals":[ {"subst":"rpt"}, {"subst":"target_indicator"} ],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{
		"id":"fopid_phix",
		"comment":"id passed to the final_output_prep template; used there to construct unique file names",
		"subst_constructor":{
			"vals":[ {"subst":"rpt"}, {"subst":"phix_indicator"} ],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{"id":"final_output_prep_target_name","required":"no","default":"final_output_prep"},
	{
		"id":"final_output_prep_target",
		"required":"yes",
		"subst_constructor":{
			"vals":[ {"subst":"cfgdatadir"}, "/", {"subst":"final_output_prep_target_name"}, ".json" ],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{"id":"final_output_prep_phix_name","required":"no","default":"final_output_prep"},
	{
                "id":"final_output_prep_phix",
		"required":"yes",
		"subst_constructor":{
			"vals":[ {"subst":"cfgdatadir"}, "/", {"subst":"final_output_prep_phix_name"}, ".json" ],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{"id":"c2a_list","required":true,"default":["target"]},
	{"id":"c2a_target","required":"no","default":{"select":"c2a_list", "allow_unspec_keys":true, "default":"deflt", "cases":{"target":"on","deflt":"off"}}},
	{"id":"c2a_phix","required":"no","default":{"select":"c2a_list", "allow_unspec_keys":true, "default":"deflt", "cases":{"phix":"on", "deflt":"off"}}},
	{"id":"post_cm","required":true,"comment":"node to follow crammerge, do not set manually","default":
		{"select":"spatial_filter_switch", "required":true, "select_range":[1], "default":"on",
			"cases":{
				"on":"spatial_filter",
				"off":
					{"select":"haplotag_processing","required":true,"select_range":[1], "default":"off",
						"cases":{
							"on": "haplotag",
							"off": "subsample_fqc"
						}
					}
			}
		}
	},
	{"id":"post_sf","required":true,"comment":"node to follow spatial_filter, do not set manually","default":
		{"select":"haplotag_processing", "required":true, "select_range":[1], "default":"off",
			"cases":{ "on":"haplotag", "off":"subsample_fqc" }
		}
	}
],
"nodes":[
	{
		"id":"crammerge",
		"type":"EXEC",
		"use_STDIN": false,
		"use_STDOUT": true,
		"cmd": [
			"samtools",
			"merge",
			"-n",
			"-O", "BAM",
			"-l", "0",
			{"select":"s2_input_format", "default":"cram", "select_range":[1], "cases":{
				"cram":["--input-fmt-option", "no_ref=1"],
				"bam":["--input-fmt", "bam"]
			}},
			"-",
			{"subst":"incrams"}
		],
		"description":"merge individual cram files from a sample into one bam file"
	},
	{
		"id":"spatial_filter",
		"type":{
			"select":"spatial_filter_switch",
			"required":true,
			"select_range":[1],
			"default":"on",
			"cases":{
				"on":"EXEC",
				"off":"INACTIVE"
			}
		},
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":[
			"bambi",
			"spatial_filter",
			"-a",
			"--compression-level", "0",
			"-f",
			"-l", {"port":"apply_stats", "direction":"out"},
			"-F", {"subst":"s2_filter_files", "required":true},
			{"subst":"spatial_filter_rg_flag"},
			"-"
		],
		"description":"apply the spatial filter (produced in stage1)"
	},
	{
		"id":"spatial_filter_file",
		"type":"INFILE",
		"name":{"subst":"spatial_filter_file","required":true, "ifnull":{"subst_constructor":{"vals":[ {"subst":"recal_dir"}, "/", {"subst":"s2_id_run"}, "_", {"subst":"s2_position"}, ".spatial_filter" ], "postproc":{"op":"concat","pad":""}}}},
		"description":"spatial filter file"
	},
	{
		"id":"spatial_filter_stats",
		"type":"OUTFILE",
		"name":{"subst":"spatial_filter_stats", "required":true, "ifnull":{"subst_constructor":{"vals":[ {"subst":"outdatadir"}, "/", {"subst":"rpt"}, ".spatial_filter.stats" ], "postproc":{"op":"concat","pad":""}}}} },
	{
		"id":"subsample_fqc",
		"type":"VTFILE",
		"comment":"inputs: _stdin_ (filtered bam); outputs: _stdout_ (bam, same as input)",
		"node_prefix":"ssfqc_",
		"name":{"subst":"subsample_vtf", "ifnull":"subsample.json"},
		"description":""
	},
	{
		"id":"haplotag",
		"description":"haplotagging post-processing",
		"type":{
			"select":"haplotag_processing",
			"required":true,
			"select_range":[1],
			"default":"off",
			"cases":{
				"on":"VTFILE",
				"off":"INACTIVE"
			}
		},
		"comment":"inputs: _stdin_ (bam)",
		"node_prefix":{ "subst_constructor":{ "vals": [ "ht_", {"subst":"phix_or_target", "ifnull":"pot"}, "_" ], "postproc":{"op":"concat", "pad":""} } },
		"name":"haplotagging.json"
	},
	{
		"id":"target_alignment",
		"type":"VTFILE",
		"comment":"inputs: _stdin_ (bam), reference, reference dict; outputs: aligned_to_target (bam), aligned_to_phix (bam)",
		"node_prefix":"aln_",
		"name":{"subst":"target_alignment_vtf", "ifnull":"target_alignment.json"},
		"description":"subgraph containing alignment process"
	},
	{
		"id":"alignment_filter",
		"type":"EXEC",
		"use_STDIN": false,
		"use_STDOUT": true,
		"cmd": [
				"bambi",
				"select",
				"--compression-level","0",
				"--input",
				{"packflag":[
					{"port":"phix_bam_in","direction":"in"},
					{"select":"no_target_alignment", "default":0, "select_range":[1],
						"cases":[
							[",", {"port":"target_bam_in","direction":"in"}],
							[]
						]
					}
				]},
				"--output",
				{"packflag":[
					{"port":"phix_bam_out","direction":"out"},
					{"select":"no_target_alignment", "default":0, "select_range":[1],
						"cases":[
							[",", {"port":"target_bam_out","direction":"out"}],
							[]
						]
					}
				]},
				{"select":"no_target_alignment", "default":0, "select_range":[1],
					"cases":[
						[],
						[ "-n", {"port":"target_bam_out","direction":"out"} ]
					]
				},
				"-m", {"port":"af_metrics","direction":"out"}
		]
	},
	{
		"id":"af_metrics",
		"type":"OUTFILE",
		"name":{"subst":"af_metrics"}
	},
        {
                "id":"final_output_prep_target",
                "type":"VTFILE",
		"comment":"inputs: _stdin_ (bam); outputs: _stdout_ (seqchksum)",
		"node_prefix":"foptgt_",
                "subst_map":{"phix_or_target":{"subst":"target_indicator"},"fopid":{"subst":"fopid_tgt"},"c2a_switch":{"subst":"c2a_target"},"bstmp":"bsfopt","brtmp":"brfopt","bmdtmp":"bmdfopt","scramble_reference_fasta":{"subst":"reference_genome_fasta"}},
                "name":{"subst":"final_output_prep_target"},
                "description":"subgraph containing post alignment_filter process (target)"
        },
        {
                "id":"final_output_prep_phix",
                "type":"VTFILE",
		"comment":"inputs: _stdin_ (bam); outputs: _stdout_ (seqchksum)",
		"node_prefix":"fopphx_",
		"subst_map":{
			"phix_or_target":{"subst":"phix_indicator"},
			"fopid":{"subst":"fopid_phix"},
			"c2a_switch":{"subst":"c2a_phix"},
			"markdup_method":"none",
			"primer_clip_method":"no_clip",
			"bstmp":"bsfopp","brtmp":"brfopp","bmdtmp":"bmdfopp",
			"scramble_reference_fasta":{"subst":"phix_reference_genome_fasta"},
			"reference_genome_fasta":{"subst":"phix_reference_genome_fasta"}
		},
                "name":{"subst":"final_output_prep_phix"},
                "description":"subgraph containing post alignment_filter process (phix)"
        },
        {
		"id":"seqchksum",
		"type":"VTFILE",
		"comment":"inputs: _stdin_ (start bam), target_seqchksum, phix_seqchksum; outputs: NONE",
		"node_prefix":"scs_",
		"name":{"subst":"seqchksum", "ifnull":"seqchksum.json"},
		"description":"subgraph containing seqchksum validation of outputs"
	}
],
"edges":[
	{ "id":"src_to_bc2", "from":"crammerge", "to":{"subst":"post_cm","required":true} },
	{"select":"spatial_filter_switch", "required":true, "select_range":[1], "default":"on", "allow_unspec_keys":true,
	"cases":{
		"on": [
			{ "id":"apply_filter_to_sfqc", "from":"spatial_filter:apply_stats", "to":"spatial_filter_stats" },
			{ "id":"sf_to_next", "from":"spatial_filter", "to":{"subst":"post_sf"} }
		]
	}},
	{
	"select":"haplotag_processing", "required":true, "select_range":[1], "default":"off", "allow_unspec_keys":true,
	"cases":{
		"on": [
			{ "id":"ht_to_next", "from":"haplotag", "to":"subsample_fqc" }
		]
	}},
	{ "id":"ssfqc_to_tgtaln", "from":"subsample_fqc:straight_through1", "to":"target_alignment" },
	{ "id":"target_alignment_to_alignment_filter", "from":"target_alignment:aligned_to_target", "to":"alignment_filter:target_bam_in" },
	{ "id":"iab_to_alignment_filter", "from":"target_alignment:aligned_to_phix", "to":"alignment_filter:phix_bam_in" },
	{ "id":"alignment_filter_to_metrics", "from":"alignment_filter:af_metrics", "to":"af_metrics" },
	{ "id":"af_to_paf_target", "from":"alignment_filter:target_bam_out", "to":"final_output_prep_target" },
	{ "id":"af_to_paf_phix", "from":"alignment_filter:phix_bam_out", "to":"final_output_prep_phix" },
        { "id":"src_to_seqchksum", "from":"subsample_fqc:straight_through2", "to":"seqchksum" },
	{ "id":"fopt_to_bam", "from":"final_output_prep_target", "to":"seqchksum:target_seqchksum" },
	{ "id":"fopp_to_bam_phix", "from":"final_output_prep_phix", "to":"seqchksum:phix_seqchksum" }
]
}
