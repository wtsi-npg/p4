{
"description": "Read ALIGNED data from multiple library CRAM files producing merged output in CRAM format: full PG history, complete SQ lines, adapter marking, etc. The seqchksum file merged from the originals is compared with the seqchksum produced post merge.The input cram is already expected to have been sorted by coordinates with the adddupmarksupport flag specified",
"version":"2.0",
"subst_params": [
	{
		"id":"basic_pipeline_params_file",
		"required":"yes",
		"subst_constructor":{
			"vals":[ {"subst":"cfgdatadir"}, "/", "alignment_common.json" ],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{
		"id": "basic_pipeline_params",
		"type":"SPFILE",
		"name":{"subst":"basic_pipeline_params_file"},
		"required": "no",
		"comment":"this will expand to a set of subst_param elements"
	},
	{ 
		"id":"incrams", 
		"required":"yes", 
		"default":"",
		"comment":"An iRODS path can be specified here"
	},
	{
		"id":"bmd_tmpfile_flag",
		"required":"no",
		"subst_constructor":{
			"vals":[ "tmpfile=", {"subst":"outdatadir"}, "/", {"subst":"bmdtmp","required":"yes"}, "_", {"subst":"library"}, ".tmp" ],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{
		"id":"bmd_metrics_file_flag",
		"required":"no",
		"subst_constructor":{
			"vals":[ "M=", {"subst":"outdatadir"}, "/", {"subst":"library"}, ".markdups_metrics.txt" ],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{
		"id":"bmd_resetdupflag",
		"comment":"this option should only be used with bamstreamingmarkduplicates (not bammarkduplicates or bammarkduplicates2)",
		"subst_constructor":{
			"vals":[ "resetdupflag", {"subst":"bmd_resetdupflag_val"} ],
			"postproc":{"op":"concat", "pad":"="}
		}
	},
	{"id":"bmd_cmd","required":"no","default":"bamstreamingmarkduplicates"},
  {
      "id": "stmd_metrics_file",
      "required": "no",
      "comment": "samtools markdup is now the standard tool",
      "subst_constructor": {
        "vals": [
          {
            "subst": "outdatadir"
          },
          "/",
          {
            "subst": "library"
          },
          ".markdups_metrics.txt"
        ],
        "postproc": {
          "op": "concat",
          "pad": ""
        }
      }
    },
	{ 
		"id":"incrams_seqchksum", 
		"required":"yes", 
		"default":"",
		"comment":"An iRODS path should not be used here"
	},
	{"id":"final_output_prep_name","required":"no","default":"merge_final_output_prep"},
	{
		"id":"merge_final_output_prep",
		"required":"yes",
		"subst_constructor":{
			"vals":[ {"subst":"cfgdatadir"}, "/", {"subst":"final_output_prep_name"}, ".json" ],
			"postproc":{"op":"concat", "pad":""}
		}
	}
],
"nodes": [
  {
      "id": "markdup",
      "description": "mark duplicates method",
      "type": "VTFILE",
      "comment": "inputs: _stdin_ (filtered bam); outputs: _stdout_ (bam, same as input)",
      "node_prefix_tba": "merged_markdup_",
      "name": {
        "select": "markdup_method",
        "required": true,
        "select_range": [
          1
        ],
        "default": "samtools",
        "cases": {
          "samtools": "merged_markdup_samtools.json",
          "biobambam": "merged_markdup_biobambam.json"
        }
      }
    },
	{
		"id":"crammerge",
		"type":"EXEC",
		"use_STDIN": false,
		"use_STDOUT": true,
		"orig_cmd":{"subst":"crammerge"},
    "cmd": [ {"subst":"samtools_executable"}, "merge", "-O", "BAM", "-l", "0", "--input-fmt-option", "no_ref=1", "-",{"subst":"incrams"} ],
		"description":"merge individual cram files from a sample into one cram file"
	},
	{
		"id": "merge_final_output_prep",
		"type": "VTFILE",
		"subst_map": { "bstmp":"bspaft", "brtmp":"brpaft", "bmdtmp":"bmdpaft" },
		"name": {"subst":"merge_final_output_prep"},
		"comment":"inputs: _stdin_ (bam); outputs: _stdout_ (seqchksum_file)",
		"description": "subgraph containing post alignment_filter process (target)"
	},
	{
		"id":"merge_seqchksum",
		"type":"EXEC",
		"use_STDIN": false,
		"use_STDOUT": true,
		"orig_cmd":{"subst":"merge_seqchksum"},
		"cmd":[ "seqchksum_merge.pl", {"subst":"incrams_seqchksum"} ],
		"description": "merge individual cram seqchksum (crc32prod) files"
	},
	{
		"id":"seqchksum_head5",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"type":"EXEC",
		"cmd":[ "head", "-5" ],
		"description":"Only use top 5 lines of seqchksum file for the comparison"
	},
	{
		"id":"seqchksumdefault_head5",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"type":"EXEC",
		"cmd":[ "head", "-5" ],
		"description":"Only use top 5 lines of seqchksum file for the comparison."
	},
	{
		"id":"cmp_seqchksumdefault",
		"use_STDIN": true,
		"use_STDOUT": true,
		"type":"EXEC",
    "cmd":[ "cmp", "-s", {"port":"merged_seqchksum", "direction":"in"} ],
		"description":"check input primary/sequence data matches output"
	}
],
  "edges": [
	{ "id": "crammerge_to_markdup", "from": "crammerge", "to": "markdup" },
	{ "id": "markdup_to_final_output_prep", "from": "markdup", "to": "merge_final_output_prep" },
	{ "id": "merge_seqchksum_to_seqchksumdefault_tee", "from": "merge_seqchksum", "to": "seqchksumdefault_head5" },
	{ "id": "seqchksumdefault_head5", "from":"seqchksumdefault_head5", "to":"cmp_seqchksumdefault:merged_seqchksum" },
	{ "id": "final_output_prep_to_head5", "from": "merge_final_output_prep","to": "seqchksum_head5" },
	{ "id": "seqchksum_head5_to_cmp_seqchksumdefault", "from": "seqchksum_head5","to": "cmp_seqchksumdefault" }
]
}
