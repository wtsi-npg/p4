{
"description":"Process DNA seq data in BAM files within NPG Pipeline producing WTSI DNAP Sequencing Informatics BAM output: full PG history, complete SQ lines, adapter marking, recoding indexing sequence etc",
"nodes":[
	{
		"id":"bmd_phix_tee0",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": false,
		"cmd":"teepot -w 300 __OUT1__ __OUT2__"
	},
	{
		"id":"bmd_tee1",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": false,
		"cmd":"teepot -w 300 __OUT1__ __OUT2__"
	},
	{
		"id":"bmd_tee2",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": false,
		"cmd":"teepot -w 300 __OUT1__ __OUT2__"
	},
	{
		"id":"bmd_tee3",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": false,
		"cmd":"teepot -w 300 __OUT1__ __OUT2__"
	},
	{
		"id":"bmd_phix_tee1",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": false,
		"cmd":"teepot -w 300 __OUT1__ __OUT2__"
	},
	{
		"id":"bmd_phix_tee2",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": false,
		"cmd":"teepot -w 300 __OUT1__ __OUT2__"
	},
	{
		"id":"scramble",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"scramble -I bam -O cram -r __REFERENCE_GENOME__"
	},
	{
		"id":"bamcheck",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"bamcheck"
	},
	{
		"id":"flagstat_filter",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"samtools view -u -F 0x900 -",
		"description":"Filter out secondary and supplementary alignment records"
	},
	{
		"id":"flagstat",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"samtools flagstat -"
	},
	{
		"id":"scramble_phix",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"scramble -I bam -O cram -r __REFERENCE_GENOME__"
	},
	{
		"id":"bamcheck_phix",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"bamcheck"
	},
	{
		"id":"flagstat_phix",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"samtools flagstat -"
	},
	{
		"id":"phix_cram",
		"type":"OUTFILE",
		"name":{"subst_param_name":"phix_cram",
			"required":"yes",
			"subst_constructor":{
				"vals":[
					{"subst_param_name":"outdatadir","required":"no","default":"."},
					"/",
					{"subst_param_name":"rpt","required":"yes"},
					"_phix.cram"
				],
				"postproc":{"op":"concat", "pad":""}
			}
		}
	},
	{
		"id":"cram",
		"type":"OUTFILE",
		"name":{"subst_param_name":"cram",
			"required":"yes",
			"subst_constructor":{
				"vals":[
					{"subst_param_name":"outdatadir","required":"no","default":"."},
					"/",
					{"subst_param_name":"rpt","required":"yes"},
					".cram"
				],
				"postproc":{"op":"concat", "pad":""}
			}
		}
	},
	{
		"id":"out_phix_bamcheck",
		"type":"OUTFILE",
		"name":{"subst_param_name":"out_phix_bamcheck",
			"required":"yes",
			"subst_constructor":{
				"vals":[
					{"subst_param_name":"outdatadir","required":"no","default":"."},
					"/",
					{"subst_param_name":"rpt","required":"yes"},
					"_phix.bamcheck"
				],
				"postproc":{"op":"concat", "pad":""}
			}
		}
	},
	{
		"id":"out_bamcheck",
		"type":"OUTFILE",
		"name":{"subst_param_name":"out_bamcheck",
			"required":"yes",
			"subst_constructor":{
				"vals":[
					{"subst_param_name":"outdatadir","required":"no","default":"."},
					"/",
					{"subst_param_name":"rpt","required":"yes"},
					".bamcheck"
				],
				"postproc":{"op":"concat", "pad":""}
			}
		}
	},
	{
		"id":"out_phix_flagstat",
		"type":"OUTFILE",
		"name":{"subst_param_name":"out_phix_flagstat",
			"required":"yes",
			"subst_constructor":{
				"vals":[
					{"subst_param_name":"outdatadir","required":"no","default":"."},
					"/",
					{"subst_param_name":"rpt","required":"yes"},
					"_phix.flagstat"
				],
				"postproc":{"op":"concat", "pad":""}
			}
		}
	},
	{
		"id":"out_flagstat",
		"type":"OUTFILE",
		"name":{"subst_param_name":"out_flagstat",
			"required":"yes",
			"subst_constructor":{
				"vals":[
					{"subst_param_name":"outdatadir","required":"no","default":"."},
					"/",
					{"subst_param_name":"rpt","required":"yes"},
					".flagstat"
				],
				"postproc":{"op":"concat", "pad":""}
			}
		}
	},
	{
		"id":"reference_genome_fasta",
		"type":"INFILE",
		"name":{"subst_param_name":"reference_genome_fasta",
			"required":"yes",
			"subst_constructor":{
				"vals":[
					{"subst_param_name":"reposdir","required":"no","default":"."},
					"/",
					{"subst_param_name":"refname_fasta","required":"yes"}
				],
				"postproc":{"op":"concat", "pad":""}
			}
		},
		"description":"Prefix for reference fasta and Bowtie2 index files"
	},
	{
		"id":"phix_reference_genome_fasta",
		"type":"INFILE",
		"name":{"subst_param_name":"phix_reference_genome_fasta",
			"required":"yes",
			"subst_constructor":{
				"vals":[
					{"subst_param_name":"reposdir","required":"no","default":"."},
					"/",
					{"subst_param_name":"phix_refname_fasta","required":"yes"}
				],
				"postproc":{"op":"concat", "pad":""}
			}
		},
		"description":"Prefix for reference fasta and Bowtie2 index files"
	},
	{
		"id":"reference_genome",
		"type":"INFILE",
		"name":{"subst_param_name":"reference_genome",
			"required":"yes",
			"subst_constructor":{
				"vals":[
					{"subst_param_name":"reposdir","required":"no","default":"."},
					"/",
					{"subst_param_name":"refname","required":"yes"}
				],
				"postproc":{"op":"concat", "pad":""}
			}
		},
		"description":"Prefix for reference fasta and Bowtie2 index files"
	},
	{
		"id":"reference_dict",
		"type":"INFILE",
		"name":{"subst_param_name":"reference_dict",
			"required":"yes",
			"subst_constructor":{
				"vals":[
					{"subst_param_name":"reposdir","required":"no","default":"."},
					"/",
					{"subst_param_name":"refdictname","required":"yes"}
				],
				"postproc":{"op":"concat", "pad":""}
			}
		},
		"description":"Extra metadata e.g. UR, M5 auxtags for BAM SQ header records"
	},
	{
		"id":"src_bam",
		"type":"INFILE",
		"name":{"subst_param_name":"src_bam",
			"required":"yes",
			"subst_constructor":{
				"vals":[
					{"subst_param_name":"indatadir","required":"no","default":"."},
					"/",
					{"subst_param_name":"rpt","required":"yes"},
					".bam"
				],
				"postproc":{"op":"concat", "pad":""}
			}
		},
		"description":"BAM using as input to this pipeline - expected to already contain PhiX (normally from hyb buffer spike-in) alignments"
	},
	{
		"id":"bamcollate2",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":["bamcollate2", "collate=1", "level=0"],
		"comment":"ensure BAM records are gathered by template i.e. queryname"
	},
	{
		"id":"tee_input",
		"comment":"prelim investigations suggest better CPU/wall time with mbuffer in place of tee",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": false,
		"cmd":"teepot -w 300 -m 1G __OUT1__ __OUT2__"
	},
	{
		"id":"bamrecompress_input",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"bamrecompress verbose=0 numthreads=2"
	},
	{
		"id":"int_adp_bam",
		"type":"RAFILE",
		"name":{"subst_param_name":"int_clipped_adapters_bam",
			"required":"yes",
			"subst_constructor":{
				"vals":[
					{"subst_param_name":"tmpdir","required":"no","default":"."},
					"/",
					{"subst_param_name":"int_clipped_adapters_bam_name",
						"required":"no",
						"default":"int_adp.bam",
						"subst_constructor":{
							"vals":[
								"int_adp_",
								{"subst_param_name":"rpt","required":"yes"},
								".bam"
							],
							"postproc":{"op":"concat", "pad":""}
						}
					}
				],
				"postproc":{"op":"concat", "pad":""}
			}
		}
	},
	{
		"id":"bamcollate2_ranking",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"bamcollate2 collate=3 level=0",
		"comment":"already collated suitably - just here to do the ranking in the name"
	},
	{
		"id":"bamreset_tophat",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"bamreset resetaux=0 level=0 verbose=0",
		"comment":"Alignment removal also required for bamadapterclip (at least 0.0.142)"
	},
	{
		"id":"bamadapterclip",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"bamadapterclip verbose=0 level=0",
		"description":"Hard clip adapter sequence from reads before feeding to Tophat2"
	},
	{
		"id":"bamtofastq",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":["bamtofastq"]
	},
	{
		"id":"bwamem",
		"comment":"presuming interleaved FR fastq records (-b flag), output all records (-T 0)",
		"type":"EXEC",
		"use_STDIN": false,
		"use_STDOUT": true,
		"cmd":{"subst_param_name":"bwamem_cmd",
			"required":"yes",
			"subst_constructor":{
				"vals":[
					{"subst_param_name":"bwa_executable","required":"no","default":"bwa"},
					"mem",
					"-t",{"subst_param_name":"num_threads","required":"no","default":"12"},
					"-p",
					"-T","0",
					"__REFERENCE_GENOME__",
					"__FQIN__"
				],
				"postproc":{"op":"pack","pad":" "}
			}
		}
	},
	{
		"id":"sam_to_bam",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"scramble -u -I sam -O bam"
	},
	{
		"id":"tee_headerSQfix",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": false,
		"cmd":"teepot -w 300 -m 5M __OUT2__ __OUT1__",
		"comment":"get deadlock when tee used here"
	},
	{
		"id":"sam_headerSQfix",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"samtools view -h -"
	},
	{
		"id":"alterSQ_headerSQfix",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"perl -nle 'use strict; use autodie; our%sq; our$re; our$body; BEGIN{$body=0; $re=qr/^\\@SQ.*\\tSN:([^\\t]+)/; open(my$df,q(<),shift@ARGV); while(<$df>){chomp; if(/$re/){$sq{$1}=$_;} } close $df; } next if $body ; if(/$re/){$_=$sq{$1}||$_}elsif(/^[^@]/){open STDOUT,q(>),q(/dev/null); $body=1; next} print' __IN_DICT__",
		"comment":"careful to not send SIGPIPE back to tee, yet ensure EOF to reheader as soon as header processed",
		"description":"where SN field in SQ header record matches one in the given dict file, replace that SQ record with that in the dict file"
	},
	{
		"id":"mbuffer_headerSQfix",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"teepot -w 300 -m 5M /dev/stdout"
	},
	{
		"id":"reheader_headerSQfix",
		"type":"EXEC",
		"use_STDIN": false,
		"use_STDOUT": true,
		"cmd":"samtools reheader __IN_SAMHEADER__ __IN_BAM__"
	},
	{
		"id":"bam12split_tophat",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"bam12split verbose=0 level=0"
	},
	{
		"id":"bamsort_qname",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"bamsort SO=queryname level=0"
	},
	{
		"id":"bamreset_prealn",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"bamreset resetaux=0 level=0 verbose=0",
		"comment":"bam12auxmerge <= 0.0.142 requires SQ headers removed. Alignment removal also required for bamadapterclip (at least 0.0.142)"
	},
	{
		"id":"bamadapterclip_prealn",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"bamadapterclip verbose=0 level=0"
	},
	{
		"id":"bam12auxmerge",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"bam12auxmerge level=0 rankstrip=1 ranksplit=0 zztoname=0 clipreinsert=1 __PREALN_BAM__"
	},
#####################################
# alignment filter and metrics output
#####################################
	{
		"id":"alignment_filter",
		"type":"EXEC",
		"use_STDIN": false,
		"use_STDOUT": true,
		"cmd":{"subst_param_name":"alignment_filter",
			"required":"yes",
			"subst_constructor":{
			"vals":[
					{"subst_param_name":"java_cmd","required":"no","default":"/software/jdk1.7.0_25/bin/java"},
					"-Xmx1000m",
					"-jar", {"subst_param_name":"alignment_filter_jar","required":"no",
						"subst_constructor":{
							"vals":[
								{"subst_param_name":"alignment_filter_jar_path","required":"no","default":"/software/npg/java_jars"},
								"/",
								"AlignmentFilter.jar"
							],
							"postproc":{"op":"concat","pad":""}
						}
					},
					"IN=__PHIX_INBAM__",
					"IN=__TARGET_INBAM__",
					"OUT=__PHIX_OUTBAM__",
					"OUT=/dev/stdout",
					"METRICS_FILE=__AF_METRICS__",
					"VALIDATION_STRINGENCY=SILENT",
					"CREATE_MD5_FILE=false",
					"VERBOSITY=INFO",
					"QUIET=false",
					"COMPRESSION_LEVEL=5",
					"MAX_RECORDS_IN_RAM=500000",
					"CREATE_INDEX=false"
				],
				"postproc":{"op":"noconcat", "pad":" "}
			}
		}
	},
	{
		"id":"af_metrics",
		"type":"OUTFILE",
		"name":{"subst_param_name":"af_metrics",
			"required":"yes",
			"subst_constructor":{
				"vals":[
					{"subst_param_name":"logdir","required":"no","default":"."},
					"/",
					{"subst_param_name":"rpt","required":"yes"},
					".",
					{"subst_param_name":"af_metrics_name","required":"no","default":"alignment_filter_metrics.json"}
				],
				"postproc":{"op":"concat", "pad":""}
			}
		}
	},
#######################
# phiX final processing
#######################
	{
		"id":"bamsort_coord_phix",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"bamsort SO=coordinate level=0"
	},
	{
		"id":"bammarkduplicates_phix",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":{"subst_param_name":"bammarkduplicates_phix",
			"required":"yes",
			"subst_constructor":{
				"vals":[
					"bammarkduplicates ",
					"level=0 ",
					"M=",
					{"subst_param_name":"outdatadir","required":"no","default":"."},
					"/",
					{"subst_param_name":"rpt","required":"yes"},
					"_phix.markdups_metrics.txt"
				],
				"postproc":{"op":"concat", "pad":""}
			}
		}
	},
	{
		"id":"bamrecompress_phix",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
        "cmd":{"subst_param_name":"bamrecompress_phix",
            "required":"yes",
            "subst_constructor":{
                "vals":[
                    "bamrecompress index=1 md5=1 numthreads=2 ",
                    "indexfilename=",
					{"subst_param_name":"outdatadir","required":"no","default":"."},
					"/",
                    {"subst_param_name":"rpt","required":"yes"},
                    "_phix.bai ",
                    "md5filename=",
					{"subst_param_name":"outdatadir","required":"no","default":"."},
					"/",
                    {"subst_param_name":"rpt","required":"yes"},
                    "_phix.bam.md5"
                ],
                "postproc":{"op":"concat", "pad":""}
            }
        }
	},
	{
		"id":"phix_bam",
		"type":"OUTFILE",
		"name":{"subst_param_name":"phix_bam",
			"required":"yes",
			"subst_constructor":{
				"vals":[
					{"subst_param_name":"outdatadir","required":"no","default":"."},
					"/",
					{"subst_param_name":"rpt","required":"yes"},
					"_",
					{"subst_param_name":"phix_bam_name","required":"no","default":"phix.bam"}
				],
				"postproc":{"op":"concat", "pad":""}
			}
		}
	},
#############################
# target BAM final processing
#############################
	{
		"id":"bamsort_coord_target",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"bamsort SO=coordinate level=0"
	},
	{
		"id":"bammarkduplicates_target",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":{"subst_param_name":"bammarkduplicates_target",
			"required":"yes",
			"subst_constructor":{
				"vals":[
					"bammarkduplicates ",
					"level=0 ",
					"M=",
					{"subst_param_name":"outdatadir","required":"no","default":"."},
					"/",
					{"subst_param_name":"rpt","required":"yes"},
					".markdups_metrics.txt"
				],
				"postproc":{"op":"concat", "pad":""}
			}
		}
	},
	{
		"id":"bamrecompress_target",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
        "cmd":{"subst_param_name":"bamrecompress_target",
            "required":"yes",
            "subst_constructor":{
                "vals":[
                    "bamrecompress index=1 md5=1 numthreads=2 ",
                    "indexfilename=",
					{"subst_param_name":"outdatadir","required":"no","default":"."},
					"/",
                    {"subst_param_name":"rpt","required":"yes"},
                    ".bai ",
                    "md5filename=",
					{"subst_param_name":"outdatadir","required":"no","default":"."},
					"/",
                    {"subst_param_name":"rpt","required":"yes"},
                    ".bam.md5"
                ],
                "postproc":{"op":"concat", "pad":""}
            }
        }
	},
	{
		"id":"target_bam",
		"type":"OUTFILE",
		"name":{"subst_param_name":"target_bam",
			"required":"yes",
			"subst_constructor":{
				"vals":[
					{"subst_param_name":"outdatadir","required":"no","default":"."},
					"/",
					{"subst_param_name":"rpt","required":"yes"},
					{"subst_param_name":"bam_name","required":"no","default":".bam"}
				],
				"postproc":{"op":"concat", "pad":""}
			}
		}
	},
##################################################
# check input primary/sequence data matches output
##################################################
	{
		"id":"bamcat_output",
		"type":"EXEC",
		"use_STDIN": false,
		"use_STDOUT": true,
		"cmd":"bamcat verbose=0 level=0 __PHIXBAM__ __TARGETBAM__"
	},
	{
		"id":"seqchksum_output",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"bamseqchksum"
	},
	{
		"id":"seqchksum_input",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"bamseqchksum"
	},
	{
		"id":"cmp_seqchksum",
		"type":"EXEC",
		"use_STDIN": false,
		"use_STDOUT": false,
		"cmd":"cmp -s __INPUTCHK__ __OUTPUTCHK__",
		"description":"check input primary/sequence data matches output"
	}
],
"edges":[
	{
		"id":"ref_to_scramble",
		"from":"reference_genome_fasta",
		"to":"scramble:__REFERENCE_GENOME__"
	},
	{
		"id":"ref_to_scramble_phix",
		"from":"phix_reference_genome_fasta",
		"to":"scramble_phix:__REFERENCE_GENOME__"
	},
	{   
		"id":"bammarkduplicates_phix_to_tee",
		"from":"bammarkduplicates_phix",
		"to":"bmd_phix_tee0"
	},
	{   
		"id":"bmd_phix_tee0_to_bmd_phix_tee0",
		"from":"bmd_phix_tee0:__OUT2__",
		"to":"bmd_phix_tee1"
	},
	{   
		"id":"bammarkduplicates_to_tee",
		"from":"bammarkduplicates_target",
		"to":"bmd_tee1"
	},
	{   
		"id":"tee_to_scramble_phix",
		"from":"bmd_phix_tee1:__OUT2__",
		"to":"scramble_phix"
	},
	{   
		"id":"tee_to_scramble",
		"from":"bmd_tee1:__OUT2__",
		"to":"scramble"
	},
	{   
		"id":"bmd_phix_tee1_to_bmd_phix_tee2",
		"from":"bmd_phix_tee1:__OUT1__",
		"to":"bmd_phix_tee2"
	},
	{   
		"id":"bmd_tee1_to_bmd_tee2",
		"from":"bmd_tee1:__OUT1__",
		"to":"bmd_tee2"
	},
	{
		"id":"tee_phix_to_bamcheck_phix",
		"from":"bmd_phix_tee2:__OUT1__",
		"to":"bamcheck_phix"
	},
	{
		"id":"tee_to_bamcheck",
		"from":"bmd_tee2:__OUT2__",
		"to":"bamcheck"
	},
	{
		"id":"bmd_tee2_to_bmd_tee3",
		"from":"bmd_tee2:__OUT1__",
		"to":"bmd_tee3"
	},
	{
		"id":"bmd_tee2_phix_to_flagstat",
		"from":"bmd_phix_tee2:__OUT2__",
		"to":"flagstat_phix"
	},
	{
		"id":"bmd_tee3_to_flagstat_filter",
		"from":"bmd_tee3:__OUT2__",
		"to":"flagstat_filter"
	},
	{
		"id":"flagstat_filter_to_flagstat",
		"from":"flagstat_filter",
		"to":"flagstat"
	},
	{
		"id":"scramble_to_phix_cram",
		"from":"scramble_phix",
		"to":"phix_cram"
	},
	{
		"id":"scramble_to_cram",
		"from":"scramble",
		"to":"cram"
	},
	{
		"id":"bamcheck_to_phix",
		"from":"bamcheck_phix",
		"to":"out_phix_bamcheck"
	},
	{
		"id":"bamcheck_to_out",
		"from":"bamcheck",
		"to":"out_bamcheck"
	},
	{
		"id":"flagstat_to_phix",
		"from":"flagstat_phix",
		"to":"out_phix_flagstat"
	},
	{
		"id":"flagstat_to_out",
		"from":"flagstat",
		"to":"out_flagstat"
	},
	{
		"id":"ref_to_bwamem",
		"from":"reference_genome",
		"to":"bwamem:__REFERENCE_GENOME__"
	},
	{
		"id":"src_to_bc2",
		"from":"src_bam",
		"to":"bamcollate2"
	},
	{
		"id":"bc2_to_ti",
		"from":"bamcollate2",
		"to":"tee_input"
	},
	{
		"id":"ti_to_brc",
		"from":"tee_input:__OUT1__",
		"to":"bamrecompress_input"
	},
	{
		"id":"brc_to_int_adp_bam",
		"from":"bamrecompress_input",
		"to":"int_adp_bam"
	},
	{
		"id":"ti_to_bamcollate2_ranking",
		"from":"tee_input:__OUT2__",
		"to":"bamcollate2_ranking"
	},
	{
		"id":"bamcollate2_ranking_to_bamreset_tophat",
		"from":"bamcollate2_ranking",
		"to":"bamreset_tophat"
	},
	{
		"id":"bamreset_tophat_to_bamtofastq",
		"from":"bamreset_tophat",
		"to":"bamadapterclip"
	},
	{
		"id":"bamadapterclip_to_bamtofastq",
		"from":"bamadapterclip",
		"to":"bamtofastq"
	},
	{
		"id":"bamtofastq_to_bwamem",
		"from":"bamtofastq",
		"to":"bwamem:__FQIN__"
	},
	{
		"id":"bwamem_to_sam_to_bam",
		"from":"bwamem",
		"to":"sam_to_bam"
	},
	{
		"id":"sam_to_bam_to_tee_headerSQfix",
		"from":"sam_to_bam",
		"to":"tee_headerSQfix"
	},
	{
		"id":"tee_headerSQfix_to_sam",
		"from":"tee_headerSQfix:__OUT1__",
		"to":"sam_headerSQfix"
	},
	{
		"id":"reference_dict_to_sam_headerSQfix",
		"from":"reference_dict",
		"to":"alterSQ_headerSQfix:__IN_DICT__"
	},
	{
		"id":"sam_headerSQfix_to_alterSQ",
		"from":"sam_headerSQfix",
		"to":"alterSQ_headerSQfix"
	},
	{
		"id":"alterSQ_headerSQfix_to_reheader",
		"from":"alterSQ_headerSQfix",
		"to":"reheader_headerSQfix:__IN_SAMHEADER__"
	},
	{
		"id":"tee_headerSQfix_to_mbuffer",
		"from":"tee_headerSQfix:__OUT2__",
		"to":"mbuffer_headerSQfix"
	},
	{
		"id":"mbuffer_headerSQfix_to_reheader",
		"from":"mbuffer_headerSQfix",
		"to":"reheader_headerSQfix:__IN_BAM__"
	},
	{
		"id":"reheader_headerSQfix_to_bam12split_tophat",
		"from":"reheader_headerSQfix",
		"to":"bam12split_tophat"
	},
	{
		"id":"bam12split_tophat_to_bamsort_qname",
		"from":"bam12split_tophat",
		"to":"bamsort_qname"
	},
	{
		"id":"bam_to_bamreset_prealn",
		"from":"int_adp_bam",
		"to":"bamreset_prealn"
	},
	{
		"id":"bamreset_prealn_to_bamadapterclip_prealn",
		"from":"bamreset_prealn",
		"to":"bamadapterclip_prealn"
	},
	{
		"id":"bamadapterclip_prealn_to_bam12auxmerge",
		"from":"bamadapterclip_prealn",
		"to":"bam12auxmerge:__PREALN_BAM__"
	},
	{
		"id":"bsqn_to_bam12auxmerge",
		"from":"bamsort_qname",
		"to":"bam12auxmerge"
	},
	{
		"id":"bam12auxmerge_to_alignment_filter",
		"from":"bam12auxmerge",
#################
# AlignmentFilter
#################
		"to":"alignment_filter:__TARGET_INBAM__"
	},
	{
		"id":"iab_to_alignment_filter",
		"from":"int_adp_bam",
		"to":"alignment_filter:__PHIX_INBAM__"
	},
	{
		"id":"alignment_filter_to_metrics",
		"from":"alignment_filter:__AF_METRICS__",
		"to":"af_metrics"
	},
#####################
# phiX BAM production
#####################
	{
		"id":"alignmentfilter_to_bamsort_coord_phix",
		"from":"alignment_filter:__PHIX_OUTBAM__",
		"to":"bamsort_coord_phix"
	},
	{
		"id":"bamsort_phix_to_bammarkduplicates_phix",
		"from":"bamsort_coord_phix",
		"to":"bammarkduplicates_phix"
	},
	{
		"id":"bmd_phix_tee0_to_bamrecompress_phix",
		"from":"bmd_phix_tee0:__OUT1__",
		"to":"bamrecompress_phix"
	},
	{
		"id":"bamrecompress_to_pb",
		"from":"bamrecompress_phix",
		"to":"phix_bam"
	},
#######################
# Target BAM production
#######################
	{
		"id":"alignmentfilter_to_bamsort_coord_target",
		"from":"alignment_filter",
		"to":"bamsort_coord_target"
	},
	{
		"id":"bamsort_phix_to_bammarkduplicates_target",
		"from":"bamsort_coord_target",
		"to":"bammarkduplicates_target"
	},
	{
		"id":"bmd_to_bamrecompress",
		"from":"bmd_tee3:__OUT1__",
		"to":"bamrecompress_target"
	},
	{
		"id":"final_stretch",
		"from":"bamrecompress_target",
		"to":"target_bam"
	},
##################################################
# check input primary/sequence data matches output
##################################################
	{
		"id":"phix_bam_to_bamcat",
		"from":"phix_bam",
		"to":"bamcat_output:__PHIXBAM__"
	},
	{
		"id":"target_bam_to_bamcat",
		"from":"target_bam",
		"to":"bamcat_output:__TARGETBAM__"
	},
	{
		"id":"bamcat_to_chk_output",
		"from":"bamcat_output",
		"to":"seqchksum_output"
	},
	{
		"id":"src_bam_to_chk_input",
		"from":"src_bam",
		"to":"seqchksum_input"
	},
	{
		"id":"seqchksum_output_to_cmp",
		"from":"seqchksum_output",
		"to":"cmp_seqchksum:__OUTPUTCHK__"
	},
	{
		"id":"seqchksum_input_to_cmp",
		"from":"seqchksum_input",
		"to":"cmp_seqchksum:__INPUTCHK__"
	}
]
}
