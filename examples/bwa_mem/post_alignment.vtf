{
"description":"A HiSeqX processing pipeline",
"subgraph_io":{
	"ports":{
		"inputs":{
			"_stdin_":"teepot_headerSQfix",
			"reference_picard_dict":"alterSQ_headerSQfix:__IN_PICARD_DICT__",
			"unaligned_bam":"bam12auxmerge:__PREALN_BAM__"
		},
		"outputs":{
			"_stdout_":"bam12auxmerge"
		}
	}
},
"nodes":[
	{
		"id":"teepot_headerSQfix",
		"type":"EXEC",
		"cmd":"teepot __OUT1__ -",
		"comment":"replaced mbuffer -f -q -m 5M -o - -o __OUT1__ to avoid deadlock"
	},
	{
		"id":"sam_headerSQfix",
		"type":"EXEC",
		"cmd":"samtools view -h -"
	},
	{
		"id":"alterSQ_headerSQfix",
		"type":"EXEC",
		"cmd":"perl -nle 'use strict; use autodie; our%sq; our$re; our$body; BEGIN{$body=0; $re=qr/^\\@SQ.*\\tSN:([^\\t]+)/; open(my$df,q(<),shift@ARGV); while(<$df>){chomp; if(/$re/){$sq{$1}=$_;} } close $df; } next if $body ; if(/$re/){$_=$sq{$1}||$_}elsif(/^[^@]/){open STDOUT,q(>),q(/dev/null); $body=1; next} print' __IN_PICARD_DICT__",
		"comment":"careful to not send SIGPIPE back to tee, yet ensure EOF to reheader as soon as header processed",
		"description":"where SN field in SQ header record matches one in the given dict file, replace that SQ record with that in the dict file"
	},
	{
		"id":"mbuffer_headerSQfix",
		"type":"EXEC",
		"cmd":"teepot -",
		"comment":"replaced mbuffer -f -q -m 5M to remove deadlock"
	},
	{
		"id":"reheader_headerSQfix",
		"type":"EXEC",
		"cmd":"samtools reheader __IN_SAMHEADER__ __IN_BAM__"
	},
	{
		"id":"bam12split",
		"type":"EXEC",
		"cmd":"bam12split verbose=1 level=0"
	},
	{
		"id":"bamsort_qname",
		"type":"EXEC",
		"cmd":"bamsort level=0 SO=queryname fixmates=1 adddupmarksupport=1"
	},
	{
		"id":"bam12auxmerge",
		"type":"EXEC",
		"cmd":"bam12auxmerge level=0 rankstrip=1 ranksplit=0 zztoname=0 clipreinsert=1 __PREALN_BAM__"
	}
],
"edges":[
	{
		"id":"tee_headerSQfix_to_sam",
		"from":"tee_headerSQfix:__OUT1__",
		"to":"sam_headerSQfix"
	},
	{
		"id":"sam_headerSQfix_to_alterSQ",
		"from":"sam_headerSQfix",
		"to":"alterSQ_headerSQfix"
	},
	{
		"id":"alterSQ_headerSQfix_to_reheader",
		"from":"alterSQ_headerSQfix",
		"to":"reheader_headerSQfix:__IN_SAMHEADER__"
	},
	{
		"id":"tee_headerSQfix_to_mbuffer",
		"from":"teepot_headerSQfix",
		"to":"mbuffer_headerSQfix"
	},
	{
		"id":"mbuffer_headerSQfix_to_reheader",
		"from":"mbuffer_headerSQfix",
		"to":"reheader_headerSQfix:__IN_BAM__"
	},
	{
		"id":"reheader_headerSQfix_to_bam12split",
		"from":"reheader_headerSQfix",
		"to":"bam12split"
	},
	{
		"id":"bam12split_to_bamsort_qname",
		"from":"bam12split",
		"to":"bamsort_qname"
	},
	{
		"id":"bamsort_qname_to_bam12auxmerge",
		"from":"bamsort_qname",
		"to":"bam12auxmerge"
	}
]
}
